/*
	LESS mixins based on the CCS3 Flexible Box Layout model
	By Philippe Rutten
	
	Purpose: determine the layout of multiple elements in a same container
	This includes:
	- the direction/orientation in which they are laid out
	- the way they are grouped/spaced
	- the way they align with the container and with each other
	
	The CSS standard is still in draft stage and has undergone several transformations already
	with varying property and parameter namings. The principles however remain the same.
	
	These mixins are based on the latest version to date (11-11-2014). 
	
	Covered are:
	
	CONTAINER PROPERTIES:
	 	orientation	-> flex-direction 	: row | row-reverse | column | column-reverse
		wrapping	-> flex-wrap 		: nowrap | wrap | wrap-reverse
		packing		-> justify-content	: flex-start | flex-end | center | space-between | space-around
		alignment	-> align-items		: flex-start | flex-end | center | stretch | baseline

	CHILD PROPERTIES:
		growing to use
		excess space	-> flex-grow 	: [number] --equals its share of 'benefit' from excess container space
		shrinking to fit
		limited space	-> flex-shrink	: [number] --equals its share of 'sacrifice' to short container space


	Not covered are the following child-properties:
	
		order			-- number	= order number among siblings
		flex-basis		-- size		= base-size of the child
		align-self		-- auto | flex-start | flex-end | center | stretch | baseline
		

	Source:		http://css-tricks.com/snippets/css/a-guide-to-flexbox/
	Compliance: Chrome 29+, Firefox 22+, Safari 6.1+, IE10-11
	Note:		To date, Safari requires the -webkit- prefix (see mixins)
	
	*/
	
	
	// CONTAINER PROPERTIES 
	
	.orient(@x)	{	 -webkit-flex-direction	: @x;
						 -ms-flex-direction	: @x;
					 		 flex-direction	: @x;
					 		
							  .legacy-orient(@x); } // adapter for older versions

	.wrap(@x)	{		  -webkit-flex-wrap	: @x;
							  -ms-flex-wrap : @x;
					 	  		  flex-wrap	: @x; }

	.pack(@x)	{	-webkit-justify-content	: @x;	
							justify-content	: @x;
							
								.legacy-pack(@x); } // adapter for older versions

	.align(@x)	{		-webkit-align-items	: @x;
								align-items	: @x;
								
						  -webkit-box-align : @x; // older versions
							 -moz-box-align : @x;
								  box-align : @x;
							 -ms-flex-align : @x;
								
							  .legacy-align(@x); } // adapter for older versions

.legacy-orient(row){ .legacy-orient(horizontal); }
.legacy-orient(column){ .legacy-orient(vertical); }
.legacy-orient(@x){	-webkit-box-orient: @x;
					   -moz-box-orient: @x; 
							box-orient: @x; }

.legacy-pack(flex-start){ .legacy-pack(start); }
.legacy-pack(flex-end){ .legacy-pack(end); }
.legacy-pack(@x){ -webkit-box-pack: @x;
					 -moz-box-pack: @x; 
					 -ms-flex-pack: @x; 
						  box-pack: @x; }

.legacy-align(flex-start){ .legacy-align(start) }
.legacy-align(flex-end){ .legacy-align(end) }
.legacy-align(@x){ -webkit-box-align : @x;
					  -moz-box-align : @x;
					  -ms-flex-align : @x;
						   box-align : @x; }



	// CHILD PROPERTIES	
	
	.shrink(@x:1)	{	-webkit-flex-shrink	: @x;
								flex-shrink	: @x; }
								
	.grow(@x:1)		{	  -webkit-flex-grow	: @x;
									   grow	: @x; }
						
	.flex(@x:1)		{	   -webkit-box-flex : @x @x auto;
	    					  -moz-box-flex : @x @x auto;
							   -webkit-flex : @x @x auto;
								   -ms-flex : @x @x auto;
	  								   flex : @x @x auto; }

	.scroll(){ overflow:auto; }


	// MAIN CLASSES
	
	@default-pack	: flex-start;
	@default-align	: stretch;
	@default-wrap	: nowrap;
	@default-flex	: 0;

	.flexbox(){	display:  -webkit-box; // old
	  			display: 	 -moz-box; // old
	  			display:  -ms-flexbox; // tweener
	  			display: -webkit-flex; // new
	  			display: 		 flex; // new

				> * { .flex(@default-flex); }
	}

	.vlayout(@pack:@default-pack,@align:@default-align,@wrap:@default-wrap){
		.flexbox();
		.orient(column);
		.wrap(@wrap);
		.pack(@pack);
		.align(@align);
	}
	.hlayout(@pack:@default-pack,@align:@default-align,@wrap:@default-wrap){
		.flexbox();
		.orient(row);
		.wrap(@wrap);
		.pack(@pack);
		.align(@align);
	}
	